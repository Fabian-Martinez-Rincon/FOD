
procedure actualizarMaestro(var mae:maestro; var det:detalle);  //ACTUALIZAR UN MAESTRO CON UN DETALLE CON REPETICION
var
   regm:alumno; regd:detAlumno;  aux:integer; cursadasSin:integer; cursadasCon:integer;
begin
   reset(det); reset(mae);
   read(mae,regm);
   leer(det,regd);
   while (regd.cod<>valoralto) do begin   //mientras no se termine mi detalle
         aux:=regd.cod;                    //almaceno el codigo actual
         cursadasSin:=0; cursadasCon:=0;    //contadores!!
         while (aux=regd.cod) do begin      //mientras es el mismo alumno
               if(regd.informacionFinal=0) then
                                     cursadasSin:=cursadasSin+1
               else                                               //acumulo el contador correspondiente a la informacion
                                     cursadasCon:=cursadasCon+1;
               leer(det,regd);       //avanzo
               end;
         while(regm.cod<>aux) do     //busco el maestro a actualizar
                              read(mae,regm);
         regm.cursadas:=regm.cursadas+cursadasSin;           //modifico los campos
         regm.materiasFinal:=regm.materiasFinal+cursadasCon;
         seek(mae,filePos(mae)-1);                           //acomodo el puntero
         write(mae,regm); //escribo      //SI SE ROMPE PONER CONDICION DEL EOF PARA LEER EL MAESTRO
         end;
   close(mae); close(det);
end;


procedure actualizarMaestro(var mae:maestro; var det:detalle);  //ACTUALIZAR UN MAESTRO CON UN DETALLE SIN REPETICION
var
   regm:alumno; regd:detAlumno;  aux:integer; cursadasSin:integer; cursadasCon:integer;
begin
   reset(det); reset(mae);
   read(mae,regm);
   leer(det,regd);
   while (regd.cod<>valoralto) do begin   //mientras no se termine mi detalle        
               if(regd.informacionFinal=0) then
                                     cursadasSin:=cursadasSin+1
               else                                               //actualizo con condicion en este caso
                                     cursadasCon:=cursadasCon+1;
               leer(det,regd);       //avanzo
               end;
         while(regm.cod<>aux) do     //busco el maestro a actualizar
                              read(mae,regm);
         regm.cursadas:=regm.cursadas+cursadasSin;           //modifico los campos
         regm.materiasFinal:=regm.materiasFinal+cursadasCon;
         seek(mae,filePos(mae)-1);                           //acomodo el puntero
         write(mae,regm); //escribo      //SI SE ROMPE PONER CONDICION DEL EOF PARA LEER EL MAESTRO
         end;
   close(mae); close(det);
end;

procedure actualizar(var mae:maestro; var det1,det,2,det3:detalle); //ACTUALIZAR CON N DETALLES CON REPETICION(MERGE)
var
	regd1,regd2,regd3,min:tipoRegDet; regm:regMae;
begin
	reset (mae); reset (det1); reset (det2); reset (det3);
 	leer(det1, regd1); leer(det2, regd2); leer(det3, regd3);
 	minimo(regd1, regd2, regd3, min);

 	while (min.cod <> valoralto) do begin
		read(mae,regm);
		while (regm.cod <> min.cod) do read(mae1,regm);
		while (regm.cod = min.cod ) do begin		//MIENTRAS SEA DETALLE DEL MISMO ELEMENTO(SI ES SIN REPETICION SACAR ESTO IZIPIZI
			regm.cant:=regm.cant - min.cantvendida;	//ACTUALIZA REGM
			minimo(regd1, regd2, regd3, min);
		end;
		seek (mae, filepos(mae)-1);
		write(mae,regm);
	end;
end;


procedure actualizar(var mae:maestro; var aDet:arrayDetalle);		//ACTUALIZAR CON VECTOR DETALLES
var
   i:integer;  aRegD:arrayRegD;  min:pedido; sucursal:integer; regm:producto; 

begin
     for i:=1 to 4 do begin
         reset(aDet[i]);
         leer(aDet[i],aRegD[i]);   //abro y leo el primer registro de cada detalle
         end;
     reset(mae);                    //abro maestro
     read(mae,regm);
     minimo(aRegD,aDet,min,sucursal);     //saco el minimo entre los 4 registros leidos
     while(min.cod<>valoralto) do begin  //mientras no se me terminen los registros de detalles
                               while(regm.cod<>min.cod) do
                                         read(mae,regm);       //busco el maestro a actualizar
                               regm.stockActual:=regm.stockActual-min.cant;
                               seek(mae,filePos(mae)-1);
                               write(mae,regm);             //actualizo maestro
                               minimo(aRegD,aDet,min,sucursal);
     end;
     close(mae);
     for i:=1 to 4 do
         close(aDet[i]);
end;




procedure actualizar(var mae:maestro; var aDet:arrayDetalle);		//ACTUALIZAR CON VECTOR DETALLES(y condiciones para su procesamiento -diferencia con stock-)
var
   i:integer; codActual:integer;  aRegD:arrayRegD;  min:pedido; sucursal:integer; cantSolicitada:integer; regm:producto;  dif:integer; posAct:integer;

begin
     for i:=1 to 4 do begin
         reset(aDet[i]);
         leer(aDet[i],aRegD[i]);   //abro y leo el primer registro de cada detalle
         end;
     reset(mae);                    //abro maestro
     read(mae,regm);
     minimo(aRegD,aDet,min,sucursal);     //saco el minimo entre los 4 registros leidos
     readln();
     while(min.cod<>valoralto) do begin  //mientras no se me terminen los registros de detalles
                               cantSolicitada:=0;
                               codActual:=min.cod;
                               cantSolicitada:=cantSolicitada + min.cant;
                               posAct:=filePos(mae);
                               while(regm.cod<>codActual) do
                                         read(mae,regm);       //busco el maestro a actualizar
                               if eof(mae) then  begin
                                  writeln('Producto no existe');   //(puede no existir el codigo que venga en el det)
                                  seek(mae,posAct);
                               end;
                               dif:=cantSolicitada-regm.stockActual;
                               if(dif>0) then begin
                                         regm.stockActual:=0;           //controlo la diferencia e informo segun la condicion
                                         writeln('No se pudo satisfacer el pedido de la sucursal ', sucursal, ', producto ',  codActual, '. Cantidad que no pudo ser enviada: ', dif);
                                              end
                               else begin
                                    regm.stockActual:=regm.stockActual-cantSolicitada;
                                    if(regm.stockActual<regm.stockMinimo) then
                                         writeln('El pedido del producto ' , regm.cod, 'se envio pero quedo debajo del stock minimo')
                                    else
                                        writeln('Pedido hecho satisfactoriamente');
                                    end;
                               seek(mae,filePos(mae)-1);
                               write(mae,regm);             //actualizo maestro

                               minimo(aRegD,aDet,min,sucursal);
     end;
     close(mae);
     for i:=1 to 4 do
         close(aDet[i]);
end;